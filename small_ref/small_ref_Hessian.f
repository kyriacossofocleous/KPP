C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C Hessian File                                                     
C                                                                  
C Generated by KPP-2.2.3 symbolic chemistry Kinetics PreProcessor  
C       (http://www.cs.vt.edu/~asandu/Software/KPP)                
C KPP is distributed under GPL, the general public licence         
C       (http://www.gnu.org/copyleft/gpl.html)                     
C (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           
C (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            
C     With important contributions from:                           
C        M. Damian, Villanova University, USA                      
C        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
C                                                                  
C File                 : small_ref_Hessian.f                       
C Time                 : Wed Mar  9 12:16:21 2022                  
C Working directory    : /home/kyriacos/CyprusInstitute/kpp/small_ref
C Equation file        : small_ref.kpp                             
C Output root filename : small_ref                                 
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C Hessian - function for Hessian (Jac derivative w.r.t. variables) 
C   Arguments :                                                    
C      V         - Concentrations of variable species (local)      
C      F         - Concentrations of fixed species (local)         
C      RCT       - Rate constants (local)                          
C      HESS      - Hessian of Var (i.e. the 3-tensor d Jac / d Var)
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      SUBROUTINE Hessian ( V, F, RCT, HESS )

      IMPLICIT NONE
      INCLUDE 'small_ref_Parameters.h'

C V - Concentrations of variable species (local)                   
      REAL*8 V(NVAR)
C F - Concentrations of fixed species (local)                      
      REAL*8 F(NFIX)
C RCT - Rate constants (local)                                     
      REAL*8 RCT(NREACT)
C HESS - Hessian of Var (i.e. the 3-tensor d Jac / d Var)          
      REAL*8 HESS(NHESS)

C --------------------------------------------------------         
C Note: HESS is represented in coordinate sparse format:           
C       HESS(m) = d^2 f_i / dv_j dv_k = d Jac_{i,j} / dv_k         
C       where i = IHESS_I(m), j = IHESS_J(m), k = IHESS_K(m).      
C --------------------------------------------------------         
C Note: d^2 f_i / dv_j dv_k = d^2 f_i / dv_k dv_j,                 
C       therefore only the terms d^2 f_i / dv_j dv_k               
C       with j <= k are computed and stored in HESS.               
C --------------------------------------------------------         

C Local variables                                                  
C D2A - Second derivatives of equation rates                       
      REAL*8 D2A(4)

C Computation of the second derivatives of equation rates          
C D2A(1) = d^2 A(4) / dV(2)dV(3)                                   
      D2A(1) = RCT(4)
C D2A(2) = d^2 A(7) / dV(1)dV(3)                                   
      D2A(2) = RCT(7)
C D2A(3) = d^2 A(8) / dV(3)dV(4)                                   
      D2A(3) = RCT(8)
C D2A(4) = d^2 A(9) / dV(2)dV(5)                                   
      D2A(4) = RCT(9)

C Computation of the Jacobian derivative                           
C HESS(1) = d^2 Vdot(1)/{dV(1)dV(3)} = d^2 Vdot(1)/{dV(3)dV(1)}    
      HESS(1) = -D2A(2)
C HESS(2) = d^2 Vdot(2)/{dV(2)dV(3)} = d^2 Vdot(2)/{dV(3)dV(2)}    
      HESS(2) = -D2A(1)
C HESS(3) = d^2 Vdot(2)/{dV(2)dV(5)} = d^2 Vdot(2)/{dV(5)dV(2)}    
      HESS(3) = -D2A(4)
C HESS(4) = d^2 Vdot(3)/{dV(1)dV(3)} = d^2 Vdot(3)/{dV(3)dV(1)}    
      HESS(4) = -D2A(2)
C HESS(5) = d^2 Vdot(3)/{dV(2)dV(3)} = d^2 Vdot(3)/{dV(3)dV(2)}    
      HESS(5) = -D2A(1)
C HESS(6) = d^2 Vdot(3)/{dV(3)dV(4)} = d^2 Vdot(3)/{dV(4)dV(3)}    
      HESS(6) = -D2A(3)
C HESS(7) = d^2 Vdot(4)/{dV(2)dV(5)} = d^2 Vdot(4)/{dV(5)dV(2)}    
      HESS(7) = D2A(4)
C HESS(8) = d^2 Vdot(4)/{dV(3)dV(4)} = d^2 Vdot(4)/{dV(4)dV(3)}    
      HESS(8) = -D2A(3)
C HESS(9) = d^2 Vdot(5)/{dV(2)dV(5)} = d^2 Vdot(5)/{dV(5)dV(2)}    
      HESS(9) = -D2A(4)
C HESS(10) = d^2 Vdot(5)/{dV(3)dV(4)} = d^2 Vdot(5)/{dV(4)dV(3)}   
      HESS(10) = D2A(3)
      RETURN
      END

C End of Hessian function                                          
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C HessTR_Vec - Hessian transposed times user vectors               
C   Arguments :                                                    
C      HESS      - Hessian of Var (i.e. the 3-tensor d Jac / d Var)
C      U1        - User vector                                     
C      U2        - User vector                                     
C      HTU       - Transposed Hessian times user vectors: (Hess x U2)^T * U1 = [d (Jac^T*U1)/d Var] * U2 
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      SUBROUTINE HessTR_Vec ( HESS, U1, U2, HTU )

      IMPLICIT NONE
      INCLUDE 'small_ref_Parameters.h'

C HESS - Hessian of Var (i.e. the 3-tensor d Jac / d Var)          
      REAL*8 HESS(NHESS)
C U1 - User vector                                                 
      REAL*8 U1(NVAR)
C U2 - User vector                                                 
      REAL*8 U2(NVAR)
C HTU - Transposed Hessian times user vectors: (Hess x U2)^T * U1 = [d (Jac^T*U1)/d Var] * U2 
      REAL*8 HTU(NVAR)

C Compute the vector HTU =(Hess x U2)^T * U1 = d (Jac^T*U1)/d Var * U2 
      HTU(1) = HESS(1)*(U1(1)*U2(3))+HESS(4)*(U1(3)*U2(3))
      HTU(2) = HESS(2)*(U1(2)*U2(3))+HESS(3)*(U1(2)*U2(5))+HESS(5)
     &        *(U1(3)*U2(3))+HESS(7)*(U1(4)*U2(5))+HESS(9)*(U1(5)
     &        *U2(5))
      HTU(3) = HESS(1)*(U1(1)*U2(1))+HESS(2)*(U1(2)*U2(2))+HESS(4)
     &        *(U1(3)*U2(1))+HESS(5)*(U1(3)*U2(2))+HESS(6)*(U1(3)
     &        *U2(4))+HESS(8)*(U1(4)*U2(4))+HESS(10)*(U1(5)*U2(4))
      HTU(4) = HESS(6)*(U1(3)*U2(3))+HESS(8)*(U1(4)*U2(3))+HESS(10)
     &        *(U1(5)*U2(3))
      HTU(5) = HESS(3)*(U1(2)*U2(2))+HESS(7)*(U1(4)*U2(2))+HESS(9)
     &        *(U1(5)*U2(2))
      RETURN
      END

C End of HessTR_Vec function                                       
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C Hess_Vec - Hessian times user vectors                            
C   Arguments :                                                    
C      HESS      - Hessian of Var (i.e. the 3-tensor d Jac / d Var)
C      U1        - User vector                                     
C      U2        - User vector                                     
C      HU        - Hessian times user vectors: (Hess x U2) * U1 = [d (Jac*U1)/d Var] * U2
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      SUBROUTINE Hess_Vec ( HESS, U1, U2, HU )

      IMPLICIT NONE
      INCLUDE 'small_ref_Parameters.h'

C HESS - Hessian of Var (i.e. the 3-tensor d Jac / d Var)          
      REAL*8 HESS(NHESS)
C U1 - User vector                                                 
      REAL*8 U1(NVAR)
C U2 - User vector                                                 
      REAL*8 U2(NVAR)
C HU - Hessian times user vectors: (Hess x U2) * U1 = [d (Jac*U1)/d Var] * U2
      REAL*8 HU(NVAR)

C Compute the vector HU =(Hess x U2) * U1 = d (Jac*U1)/d Var * U2  
      HU(1) = HESS(1)*(U1(1)*U2(3))+HESS(1)*(U1(3)*U2(1))
      HU(2) = HESS(2)*(U1(2)*U2(3))+HESS(2)*(U1(3)*U2(2))+HESS(3)
     &       *(U1(2)*U2(5))+HESS(3)*(U1(5)*U2(2))
      HU(3) = HESS(4)*(U1(1)*U2(3))+HESS(4)*(U1(3)*U2(1))+HESS(5)
     &       *(U1(2)*U2(3))+HESS(5)*(U1(3)*U2(2))+HESS(6)*(U1(3)
     &       *U2(4))+HESS(6)*(U1(4)*U2(3))
      HU(4) = HESS(7)*(U1(2)*U2(5))+HESS(7)*(U1(5)*U2(2))+HESS(8)
     &       *(U1(3)*U2(4))+HESS(8)*(U1(4)*U2(3))
      HU(5) = HESS(9)*(U1(2)*U2(5))+HESS(9)*(U1(5)*U2(2))+HESS(10)
     &       *(U1(3)*U2(4))+HESS(10)*(U1(4)*U2(3))
      RETURN
      END

C End of Hess_Vec function                                         
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


