/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*                                                                  */
/* Map File with Human-Readable Information                         */
/*                                                                  */
/* Generated by KPP-2.2.3 symbolic chemistry Kinetics PreProcessor  */
/*       (http://www.cs.vt.edu/~asandu/Software/KPP)                */
/* KPP is distributed under GPL, the general public licence         */
/*       (http://www.gnu.org/copyleft/gpl.html)                     */
/* (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           */
/* (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            */
/*     With important contributions from:                           */
/*        M. Damian, Villanova University, USA                      */
/*        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany */
/*                                                                  */
/* File                 : saprc_single.map                          */
/* Time                 : Wed Mar  9 12:16:57 2022                  */
/* Working directory    : /home/kyriacos/CyprusInstitute/kpp/saprc_single */
/* Equation file        : saprc_single.kpp                          */
/* Output root filename : saprc_single                              */
/*                                                                  */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */



### Options -------------------------------------------

FUNCTION - AGGREGATE
JACOBIAN - SPARSE W/ ACCOUNT FOR LU DECOMPOSITION FILL-IN
DOUBLE   - OFF
REORDER  - ON

### Parameters ----------------------------------------

#define NSPEC                79          /* Number of chemical species */
#define NVAR                 74          /* Number of Variable species */
#define NVARACT              66          /* Number of Active species */
#define NFIX                 5           /* Number of Fixed species */
#define NREACT               211         /* Number of reactions */
#define NVARST               0           /* Starting of variables in conc. vect. */
#define NFIXST               74          /* Starting of fixed in conc. vect. */

### Species -------------------------------------------

Variable species
  1 = H2SO4 (n)  26 = COOH (r)   51 = OLE1 (r)  
  2 = HCOOH (n)  27 = HOCOO (r)  52 = ISOPROD (r)
  3 = CCO_OH (n) 28 = BZNO2_O (r) 53 = OLE2 (r)  
  4 = RCO_OH (n) 29 = MEOH (r)   54 = MVK (r)   
  5 = CCO_OOH (n) 30 = ALK4 (r)   55 = CCHO (r)  
  6 = RCO_OOH (n) 31 = ARO1 (r)   56 = HCHO (r)  
  7 = XN (n)     32 = DCB2 (r)   57 = RNO3 (r)  
  8 = XC (n)     33 = DCB3 (r)   58 = O3P (r)   
  9 = SO2 (r)    34 = CRES (r)   59 = RCHO (r)  
 10 = O1D (r)    35 = DCB1 (r)   60 = MEK (r)   
 11 = ALK1 (r)   36 = NPHE (r)   61 = PROD2 (r) 
 12 = BACL (r)   37 = ROOH (r)   62 = O3 (r)    
 13 = PAN (r)    38 = BALD (r)   63 = HO2 (r)   
 14 = PAN2 (r)   39 = PHEN (r)   64 = RO2_N (r) 
 15 = PBZN (r)   40 = CO (r)     65 = MA_RCO3 (r)
 16 = MA_PAN (r) 41 = MGLY (r)   66 = C_O2 (r)  
 17 = H2O2 (r)   42 = ACET (r)   67 = BZCO_O2 (r)
 18 = N2O5 (r)   43 = HNO3 (r)   68 = RO2_R (r) 
 19 = HONO (r)   44 = ETHENE (r) 69 = NO (r)    
 20 = ALK2 (r)   45 = GLY (r)    70 = NO2 (r)   
 21 = ALK3 (r)   46 = BZ_O (r)   71 = NO3 (r)   
 22 = TBU_O (r)  47 = ISOPRENE (r) 72 = CCO_O2 (r)
 23 = ALK5 (r)   48 = R2O2 (r)   73 = RCO_O2 (r)
 24 = ARO2 (r)   49 = TERP (r)   74 = OH (r)    
 25 = HNO4 (r)   50 = METHACRO (r)

Fixed species
  1 = AIR (r)     3 = H2O (r)     5 = CH4 (r)   
  2 = O2 (r)      4 = H2 (r)    

### Subroutines ---------------------------------------

void Fun( 
  float V[],                             /* Concentrations of variable species (local) */
  float F[],                             /* Concentrations of fixed species (local) */
  float RCT[],                           /* Rate constants (local) */
  float Vdot[]                           /* Time derivative of variable species concentrations */
)void Jac_SP( 
  float V[],                             /* Concentrations of variable species (local) */
  float F[],                             /* Concentrations of fixed species (local) */
  float RCT[],                           /* Rate constants (local) */
  float JVS[]                            /* sparse Jacobian of variables */
)void Jac_SP_Vec( 
  float JVS[],                           /* sparse Jacobian of variables */
  float UV[],                            /* User vector for variables */
  float JUV[]                            /* Jacobian times user vector */
)void JacTR_SP_Vec( 
  float JVS[],                           /* sparse Jacobian of variables */
  float UV[],                            /* User vector for variables */
  float JTUV[]                           /* Jacobian transposed times user vector */
)void KppSolve( 
  float JVS[],                           /* sparse Jacobian of variables */
  float X[]                              /* Vector for variables */
)void KppSolveTR( 
  float JVS[],                           /* sparse Jacobian of variables */
  float X[],                             /* Vector for variables */
  float XX[]                             /* Vector for output variables */
)void Hessian( 
  float V[],                             /* Concentrations of variable species (local) */
  float F[],                             /* Concentrations of fixed species (local) */
  float RCT[],                           /* Rate constants (local) */
  float HESS[]                           /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
)void HessTR_Vec( 
  float HESS[],                          /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
  float U1[],                            /* User vector */
  float U2[],                            /* User vector */
  float HTU[]                            /* Transposed Hessian times user vectors: (Hess x U2)^T * U1 = [d (Jac^T*U1)/d Var] * U2  */
)void Hess_Vec( 
  float HESS[],                          /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
  float U1[],                            /* User vector */
  float U2[],                            /* User vector */
  float HU[]                             /* Hessian times user vectors: (Hess x U2) * U1 = [d (Jac*U1)/d Var] * U2 */
)void Initialize( 
)void Shuffle_user2kpp( 
  float V_USER[],                        /* Concentration of variable species in USER's order */
  float V[]                              /* Concentrations of variable species (local) */
)void Shuffle_kpp2user( 
  float V[],                             /* Concentrations of variable species (local) */
  float V_USER[]                         /* Concentration of variable species in USER's order */
)void Update_RCONST( 
)void Update_PHOTO( 
)void GetMass( 
  float CL[],                            /* Concentration of all species (local) */
  float Mass[]                           /* value of mass balance */
)void ReactantProd( 
  float V[],                             /* Concentrations of variable species (local) */
  float F[],                             /* Concentrations of fixed species (local) */
  float ARP[]                            /* Reactant product in each equation */
)void JacReactantProd( 
  float V[],                             /* Concentrations of variable species (local) */
  float F[],                             /* Concentrations of fixed species (local) */
  float JVRP[]                           /* d ARP(1:NREACT)/d VAR (1:NVAR) */
)