C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C The ODE Jacobian of Chemical Model File                          
C                                                                  
C Generated by KPP-2.2.3 symbolic chemistry Kinetics PreProcessor  
C       (http://www.cs.vt.edu/~asandu/Software/KPP)                
C KPP is distributed under GPL, the general public licence         
C       (http://www.gnu.org/copyleft/gpl.html)                     
C (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           
C (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            
C     With important contributions from:                           
C        M. Damian, Villanova University, USA                      
C        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
C                                                                  
C File                 : smog_ref_Jacobian.f                       
C Time                 : Fri Mar 18 18:12:32 2022                  
C Working directory    : /home/kyriacos/CyprusInstitute/kpp/smog_ref
C Equation file        : smog_ref.kpp                              
C Output root filename : smog_ref                                  
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C Jac - the Jacobian of Variables                                  
C   Arguments :                                                    
C      V         - Concentrations of variable species (local)      
C      F         - Concentrations of fixed species (local)         
C      RCT       - Rate constants (local)                          
C      JV        - full Jacobian of variables                      
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      SUBROUTINE Jac ( V, F, RCT, JV )

      IMPLICIT NONE
      INCLUDE 'smog_ref_Parameters.h'

C V - Concentrations of variable species (local)                   
      REAL*8 V(NVAR)
C F - Concentrations of fixed species (local)                      
      REAL*8 F(NFIX)
C RCT - Rate constants (local)                                     
      REAL*8 RCT(NREACT)
C JV - full Jacobian of variables                                  
      REAL*8 JV(NVAR,NVAR)


C Local variables                                                  
C B - Temporary array                                              
      REAL*8 B(21)

C B(1) = dA(1)/dV(11)                                              
      B(1) = RCT(1)
C B(2) = dA(2)/dV(2)                                               
      B(2) = 2.183e-05*F(2)
C B(4) = dA(3)/dV(5)                                               
      B(4) = 26.59*V(10)
C B(5) = dA(3)/dV(10)                                              
      B(5) = 26.59*V(5)
C B(6) = dA(4)/dV(3)                                               
      B(6) = 3775*V(12)
C B(7) = dA(4)/dV(12)                                              
      B(7) = 3775*V(3)
C B(8) = dA(5)/dV(8)                                               
      B(8) = 23410*V(12)
C B(9) = dA(5)/dV(12)                                              
      B(9) = 23410*V(8)
C B(10) = dA(6)/dV(8)                                              
      B(10) = RCT(6)
C B(11) = dA(7)/dV(6)                                              
      B(11) = 12140*V(10)
C B(12) = dA(7)/dV(10)                                             
      B(12) = 12140*V(6)
C B(13) = dA(8)/dV(9)                                              
      B(13) = 11270*V(10)
C B(14) = dA(8)/dV(10)                                             
      B(14) = 11270*V(9)
C B(15) = dA(9)/dV(7)                                              
      B(15) = 11270*V(10)
C B(16) = dA(9)/dV(10)                                             
      B(16) = 11270*V(7)
C B(17) = dA(10)/dV(11)                                            
      B(17) = 16130*V(12)
C B(18) = dA(10)/dV(12)                                            
      B(18) = 16130*V(11)
C B(19) = dA(11)/dV(7)                                             
      B(19) = 6893*V(11)
C B(20) = dA(11)/dV(11)                                            
      B(20) = 6893*V(7)
C B(21) = dA(12)/dV(4)                                             
      B(21) = 0.02143

C Construct the Jacobian terms from B's                            
      JV(1,1) = 0
      JV(1,11) = B(17)
      JV(1,12) = B(18)
      JV(2,2) = -B(2)
      JV(2,11) = B(1)
      JV(3,3) = -B(6)
      JV(3,12) = -B(7)
      JV(4,4) = -B(21)
      JV(4,7) = B(19)
      JV(4,11) = B(20)
      JV(5,2) = B(2)
      JV(5,5) = -B(4)
      JV(5,10) = -B(5)
      JV(6,6) = -B(11)
      JV(6,8) = B(10)
      JV(6,9) = B(13)
      JV(6,10) = -B(12)+B(14)
      JV(7,4) = B(21)
      JV(7,7) = -B(15)-B(19)
      JV(7,8) = B(8)
      JV(7,10) = -B(16)
      JV(7,11) = -B(20)
      JV(7,12) = B(9)
      JV(8,8) = -B(8)-B(10)
      JV(8,9) = B(13)
      JV(8,10) = B(14)
      JV(8,12) = -B(9)
      JV(9,3) = B(6)
      JV(9,7) = B(15)
      JV(9,8) = B(10)
      JV(9,9) = -B(13)
      JV(9,10) = -B(14)+B(16)
      JV(9,12) = B(7)
      JV(10,5) = -B(4)
      JV(10,6) = -B(11)
      JV(10,7) = -B(15)
      JV(10,9) = -B(13)
      JV(10,10) = -B(5)-B(12)-B(14)-B(16)
      JV(10,11) = B(1)
      JV(11,4) = B(21)
      JV(11,5) = B(4)
      JV(11,6) = B(11)
      JV(11,7) = B(15)-B(19)
      JV(11,9) = B(13)
      JV(11,10) = B(5)+B(12)+B(14)+B(16)
      JV(11,11) = -B(1)-B(17)-B(20)
      JV(11,12) = -B(18)
      JV(12,3) = -B(6)
      JV(12,6) = B(11)
      JV(12,8) = -B(8)
      JV(12,10) = B(12)
      JV(12,11) = -B(17)
      JV(12,12) = -B(7)-B(9)-B(18)
      RETURN
      END

C End of Jac function                                              
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C Jac_Vec - function for sparse multiplication: square Jacobian times vector
C   Arguments :                                                    
C      JV        - full Jacobian of variables                      
C      UV        - User vector for variables                       
C      JUV       - Jacobian times user vector                      
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      SUBROUTINE Jac_Vec ( JV, UV, JUV )

      IMPLICIT NONE
      INCLUDE 'smog_ref_Parameters.h'

C JV - full Jacobian of variables                                  
      REAL*8 JV(NVAR,NVAR)
C UV - User vector for variables                                   
      REAL*8 UV(NVAR)
C JUV - Jacobian times user vector                                 
      REAL*8 JUV(NVAR)

      JUV(1) = JV(1,1)*UV(1)+JV(1,11)*UV(11)+JV(1,12)*UV(12)
      JUV(2) = JV(2,2)*UV(2)+JV(2,11)*UV(11)
      JUV(3) = JV(3,3)*UV(3)+JV(3,12)*UV(12)
      JUV(4) = JV(4,4)*UV(4)+JV(4,7)*UV(7)+JV(4,11)*UV(11)
      JUV(5) = JV(5,2)*UV(2)+JV(5,5)*UV(5)+JV(5,10)*UV(10)
      JUV(6) = JV(6,6)*UV(6)+JV(6,8)*UV(8)+JV(6,9)*UV(9)+JV(6,10)
     &        *UV(10)
      JUV(7) = JV(7,4)*UV(4)+JV(7,7)*UV(7)+JV(7,8)*UV(8)+JV(7,10)
     &        *UV(10)+JV(7,11)*UV(11)+JV(7,12)*UV(12)
      JUV(8) = JV(8,8)*UV(8)+JV(8,9)*UV(9)+JV(8,10)*UV(10)+JV(8,12)
     &        *UV(12)
      JUV(9) = JV(9,3)*UV(3)+JV(9,7)*UV(7)+JV(9,8)*UV(8)+JV(9,9)*UV(9)
     &        +JV(9,10)*UV(10)+JV(9,12)*UV(12)
      JUV(10) = JV(10,5)*UV(5)+JV(10,6)*UV(6)+JV(10,7)*UV(7)+JV(10,9)
     &         *UV(9)+JV(10,10)*UV(10)+JV(10,11)*UV(11)
      JUV(11) = JV(11,4)*UV(4)+JV(11,5)*UV(5)+JV(11,6)*UV(6)+JV(11,7)
     &         *UV(7)+JV(11,9)*UV(9)+JV(11,10)*UV(10)+JV(11,11)*UV(11)
     &         +JV(11,12)*UV(12)
      JUV(12) = JV(12,3)*UV(3)+JV(12,6)*UV(6)+JV(12,8)*UV(8)+JV(12,10)
     &         *UV(10)+JV(12,11)*UV(11)+JV(12,12)*UV(12)
      RETURN
      END

C End of Jac_Vec function                                          
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C                                                                  
C JacTR_Vec - sparse multiplication: square Jacobian transposed times vector
C   Arguments :                                                    
C      JV        - full Jacobian of variables                      
C      UV        - User vector for variables                       
C      JTUV      - Jacobian transposed times user vector           
C                                                                  
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      SUBROUTINE JacTR_Vec ( JV, UV, JTUV )

      IMPLICIT NONE
      INCLUDE 'smog_ref_Parameters.h'

C JV - full Jacobian of variables                                  
      REAL*8 JV(NVAR,NVAR)
C UV - User vector for variables                                   
      REAL*8 UV(NVAR)
C JTUV - Jacobian transposed times user vector                     
      REAL*8 JTUV(NVAR)

      JTUV(1) = JV(1,1)*UV(1)
      JTUV(2) = JV(2,2)*UV(2)+JV(5,2)*UV(5)
      JTUV(3) = JV(3,3)*UV(3)+JV(9,3)*UV(9)+JV(12,3)*UV(12)
      JTUV(4) = JV(4,4)*UV(4)+JV(7,4)*UV(7)+JV(11,4)*UV(11)
      JTUV(5) = JV(5,5)*UV(5)+JV(10,5)*UV(10)+JV(11,5)*UV(11)
      JTUV(6) = JV(6,6)*UV(6)+JV(10,6)*UV(10)+JV(11,6)*UV(11)+JV(12,6)
     &         *UV(12)
      JTUV(7) = JV(4,7)*UV(4)+JV(7,7)*UV(7)+JV(9,7)*UV(9)+JV(10,7)
     &         *UV(10)+JV(11,7)*UV(11)
      JTUV(8) = JV(6,8)*UV(6)+JV(7,8)*UV(7)+JV(8,8)*UV(8)+JV(9,8)
     &         *UV(9)+JV(12,8)*UV(12)
      JTUV(9) = JV(6,9)*UV(6)+JV(8,9)*UV(8)+JV(9,9)*UV(9)+JV(10,9)
     &         *UV(10)+JV(11,9)*UV(11)
      JTUV(10) = JV(5,10)*UV(5)+JV(6,10)*UV(6)+JV(7,10)*UV(7)+JV(8,10)
     &          *UV(8)+JV(9,10)*UV(9)+JV(10,10)*UV(10)+JV(11,10)
     &          *UV(11)+JV(12,10)*UV(12)
      JTUV(11) = JV(1,11)*UV(1)+JV(2,11)*UV(2)+JV(4,11)*UV(4)+JV(7,11)
     &          *UV(7)+JV(10,11)*UV(10)+JV(11,11)*UV(11)+JV(12,11)
     &          *UV(12)
      JTUV(12) = JV(1,12)*UV(1)+JV(3,12)*UV(3)+JV(7,12)*UV(7)+JV(8,12)
     &          *UV(8)+JV(9,12)*UV(9)+JV(11,12)*UV(11)+JV(12,12)
     &          *UV(12)
      RETURN
      END

C End of JacTR_Vec function                                        
C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


