/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*                                                                  */
/* Map File with Human-Readable Information                         */
/*                                                                  */
/* Generated by KPP-2.2.3 symbolic chemistry Kinetics PreProcessor  */
/*       (http://www.cs.vt.edu/~asandu/Software/KPP)                */
/* KPP is distributed under GPL, the general public licence         */
/*       (http://www.gnu.org/copyleft/gpl.html)                     */
/* (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           */
/* (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            */
/*     With important contributions from:                           */
/*        M. Damian, Villanova University, USA                      */
/*        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany */
/*                                                                  */
/* File                 : small_mp.map                              */
/* Time                 : Fri Sep  2 14:41:03 2022                  */
/* Working directory    : /home/kyriacos/CyprusInstitute/KPP/small_mp */
/* Equation file        : small_mp.kpp                              */
/* Output root filename : small_mp                                  */
/*                                                                  */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */



### Options -------------------------------------------

FUNCTION - AGGREGATE
JACOBIAN - SPARSE W/ ACCOUNT FOR LU DECOMPOSITION FILL-IN
DOUBLE   - OFF
REORDER  - ON

### Parameters ----------------------------------------

#define NSPEC                7           /* Number of chemical species */
#define NVAR                 5           /* Number of Variable species */
#define NVARACT              5           /* Number of Active species */
#define NFIX                 2           /* Number of Fixed species */
#define NREACT               10          /* Number of reactions */
#define NVARST               0           /* Starting of variables in conc. vect. */
#define NFIXST               5           /* Starting of fixed in conc. vect. */

### Species -------------------------------------------

Variable species
  1 = O1D (r)     3 = O3 (r)      5 = NO2 (r)   
  2 = O (r)       4 = NO (r)    

Fixed species
  1 = M (r)       2 = O2 (r)    

### Subroutines ---------------------------------------

void Fun( 
  float V[],                             /* Concentrations of variable species (local) */
  float F[],                             /* Concentrations of fixed species (local) */
  float RCT[],                           /* Rate constants (local) */
  float Vdot[]                           /* Time derivative of variable species concentrations */
)void Jac_SP( 
  float V[],                             /* Concentrations of variable species (local) */
  float F[],                             /* Concentrations of fixed species (local) */
  float RCT[],                           /* Rate constants (local) */
  float JVS[]                            /* sparse Jacobian of variables */
)void Jac_SP_Vec( 
  float JVS[],                           /* sparse Jacobian of variables */
  float UV[],                            /* User vector for variables */
  float JUV[]                            /* Jacobian times user vector */
)void JacTR_SP_Vec( 
  float JVS[],                           /* sparse Jacobian of variables */
  float UV[],                            /* User vector for variables */
  float JTUV[]                           /* Jacobian transposed times user vector */
)void KppSolve( 
  float JVS[],                           /* sparse Jacobian of variables */
  float X[]                              /* Vector for variables */
)void KppSolveTR( 
  float JVS[],                           /* sparse Jacobian of variables */
  float X[],                             /* Vector for variables */
  float XX[]                             /* Vector for output variables */
)void Hessian( 
  float V[],                             /* Concentrations of variable species (local) */
  float F[],                             /* Concentrations of fixed species (local) */
  float RCT[],                           /* Rate constants (local) */
  float HESS[]                           /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
)void HessTR_Vec( 
  float HESS[],                          /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
  float U1[],                            /* User vector */
  float U2[],                            /* User vector */
  float HTU[]                            /* Transposed Hessian times user vectors: (Hess x U2)^T * U1 = [d (Jac^T*U1)/d Var] * U2  */
)void Hess_Vec( 
  float HESS[],                          /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
  float U1[],                            /* User vector */
  float U2[],                            /* User vector */
  float HU[]                             /* Hessian times user vectors: (Hess x U2) * U1 = [d (Jac*U1)/d Var] * U2 */
)void Initialize( 
)void Shuffle_user2kpp( 
  float V_USER[],                        /* Concentration of variable species in USER's order */
  float V[]                              /* Concentrations of variable species (local) */
)void Shuffle_kpp2user( 
  float V[],                             /* Concentrations of variable species (local) */
  float V_USER[]                         /* Concentration of variable species in USER's order */
)void Update_RCONST( 
)void Update_PHOTO( 
)void GetMass( 
  float CL[],                            /* Concentration of all species (local) */
  float Mass[]                           /* value of mass balance */
)void ReactantProd( 
  float V[],                             /* Concentrations of variable species (local) */
  float F[],                             /* Concentrations of fixed species (local) */
  float ARP[]                            /* Reactant product in each equation */
)void JacReactantProd( 
  float V[],                             /* Concentrations of variable species (local) */
  float F[],                             /* Concentrations of fixed species (local) */
  float JVRP[]                           /* d ARP(1:NREACT)/d VAR (1:NVAR) */
)