/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*                                                                  */
/* Map File with Human-Readable Information                         */
/*                                                                  */
/* Generated by KPP-2.2.3 symbolic chemistry Kinetics PreProcessor  */
/*       (http://www.cs.vt.edu/~asandu/Software/KPP)                */
/* KPP is distributed under GPL, the general public licence         */
/*       (http://www.gnu.org/copyleft/gpl.html)                     */
/* (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           */
/* (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            */
/*     With important contributions from:                           */
/*        M. Damian, Villanova University, USA                      */
/*        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany */
/*                                                                  */
/* File                 : strato.map                                */
/* Time                 : Thu Jan 27 11:36:57 2022                  */
/* Working directory    : /home/kyriacos/CyprusInstitute/kpp/strato */
/* Equation file        : strato.kpp                                */
/* Output root filename : strato                                    */
/*                                                                  */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */



### Options -------------------------------------------

FUNCTION - AGGREGATE
JACOBIAN - SPARSE W/ ACCOUNT FOR LU DECOMPOSITION FILL-IN
DOUBLE   - ON
REORDER  - ON

### Parameters ----------------------------------------

#define NSPEC                40          /* Number of chemical species */
#define NVAR                 34          /* Number of Variable species */
#define NVARACT              34          /* Number of Active species */
#define NFIX                 6           /* Number of Fixed species */
#define NREACT               109         /* Number of reactions */
#define NVARST               0           /* Starting of variables in conc. vect. */
#define NFIXST               34          /* Starting of fixed in conc. vect. */

### Species -------------------------------------------

Variable species
  1 = CH3 (r)    13 = HBr (r)    25 = Br (r)    
  2 = Cl2 (r)    14 = CH3OOH (r) 26 = OH (r)    
  3 = Cl2O2 (r)  15 = HNO4 (r)   27 = Cl (r)    
  4 = ClOO (r)   16 = HCl (r)    28 = ClO (r)   
  5 = OClO (r)   17 = H2O2 (r)   29 = O3 (r)    
  6 = BrCl (r)   18 = HOCl (r)   30 = NO (r)    
  7 = HOBr (r)   19 = HNO3 (r)   31 = BrO (r)   
  8 = BrONO2 (r) 20 = H (r)      32 = O (r)     
  9 = HCO (r)    21 = CH3O2 (r)  33 = HO2 (r)   
 10 = CH3O (r)   22 = ClONO2 (r) 34 = NO2 (r)   
 11 = O1D (r)    23 = NO3 (r)   
 12 = N2O5 (r)   24 = CH2O (r)  

Fixed species
  1 = H2O (r)     4 = N2 (r)    
  2 = H2 (r)      5 = CH4 (r)   
  3 = O2 (r)      6 = CO (r)    

### Subroutines ---------------------------------------

void Fun( 
  double V[],                            /* Concentrations of variable species (local) */
  double F[],                            /* Concentrations of fixed species (local) */
  double RCT[],                          /* Rate constants (local) */
  double Vdot[]                          /* Time derivative of variable species concentrations */
)void Jac_SP( 
  double V[],                            /* Concentrations of variable species (local) */
  double F[],                            /* Concentrations of fixed species (local) */
  double RCT[],                          /* Rate constants (local) */
  double JVS[]                           /* sparse Jacobian of variables */
)void Jac_SP_Vec( 
  double JVS[],                          /* sparse Jacobian of variables */
  double UV[],                           /* User vector for variables */
  double JUV[]                           /* Jacobian times user vector */
)void JacTR_SP_Vec( 
  double JVS[],                          /* sparse Jacobian of variables */
  double UV[],                           /* User vector for variables */
  double JTUV[]                          /* Jacobian transposed times user vector */
)void KppSolve( 
  double JVS[],                          /* sparse Jacobian of variables */
  double X[]                             /* Vector for variables */
)void KppSolveTR( 
  double JVS[],                          /* sparse Jacobian of variables */
  double X[],                            /* Vector for variables */
  double XX[]                            /* Vector for output variables */
)void Hessian( 
  double V[],                            /* Concentrations of variable species (local) */
  double F[],                            /* Concentrations of fixed species (local) */
  double RCT[],                          /* Rate constants (local) */
  double HESS[]                          /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
)void HessTR_Vec( 
  double HESS[],                         /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
  double U1[],                           /* User vector */
  double U2[],                           /* User vector */
  double HTU[]                           /* Transposed Hessian times user vectors: (Hess x U2)^T * U1 = [d (Jac^T*U1)/d Var] * U2  */
)void Hess_Vec( 
  double HESS[],                         /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
  double U1[],                           /* User vector */
  double U2[],                           /* User vector */
  double HU[]                            /* Hessian times user vectors: (Hess x U2) * U1 = [d (Jac*U1)/d Var] * U2 */
)void Initialize( 
)void Shuffle_user2kpp( 
  double V_USER[],                       /* Concentration of variable species in USER's order */
  double V[]                             /* Concentrations of variable species (local) */
)void Shuffle_kpp2user( 
  double V[],                            /* Concentrations of variable species (local) */
  double V_USER[]                        /* Concentration of variable species in USER's order */
)void Update_RCONST( 
)void Update_PHOTO( 
)void GetMass( 
  double CL[],                           /* Concentration of all species (local) */
  double Mass[]                          /* value of mass balance */
)void ReactantProd( 
  double V[],                            /* Concentrations of variable species (local) */
  double F[],                            /* Concentrations of fixed species (local) */
  double ARP[]                           /* Reactant product in each equation */
)void JacReactantProd( 
  double V[],                            /* Concentrations of variable species (local) */
  double F[],                            /* Concentrations of fixed species (local) */
  double JVRP[]                          /* d ARP(1:NREACT)/d VAR (1:NVAR) */
)