/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*                                                                  */
/* Map File with Human-Readable Information                         */
/*                                                                  */
/* Generated by KPP-2.2.3 symbolic chemistry Kinetics PreProcessor  */
/*       (http://www.cs.vt.edu/~asandu/Software/KPP)                */
/* KPP is distributed under GPL, the general public licence         */
/*       (http://www.gnu.org/copyleft/gpl.html)                     */
/* (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           */
/* (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            */
/*     With important contributions from:                           */
/*        M. Damian, Villanova University, USA                      */
/*        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany */
/*                                                                  */
/* File                 : tropo_sp.map                              */
/* Time                 : Fri Sep  2 14:40:46 2022                  */
/* Working directory    : /home/kyriacos/CyprusInstitute/KPP/tropo_sp */
/* Equation file        : tropo_sp.kpp                              */
/* Output root filename : tropo_sp                                  */
/*                                                                  */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */



### Options -------------------------------------------

FUNCTION - AGGREGATE
JACOBIAN - SPARSE W/ ACCOUNT FOR LU DECOMPOSITION FILL-IN
DOUBLE   - OFF
REORDER  - ON

### Parameters ----------------------------------------

#define NSPEC                88          /* Number of chemical species */
#define NVAR                 84          /* Number of Variable species */
#define NVARACT              74          /* Number of Active species */
#define NFIX                 4           /* Number of Fixed species */
#define NREACT               178         /* Number of reactions */
#define NVARST               0           /* Starting of variables in conc. vect. */
#define NFIXST               84          /* Starting of fixed in conc. vect. */

### Species -------------------------------------------

Variable species
  1 = SO4 (n)    30 = ALKA (r)   59 = VRO2 (r)  
  2 = ACTA (n)   31 = HNO4 (r)   60 = ALKE (r)  
  3 = R3N2 (n)   32 = PAN (r)    61 = RAO2 (r)  
  4 = SUCA (n)   33 = ACO2 (r)   62 = KET (r)   
  5 = GLUA (n)   34 = DIAL (r)   63 = KO2 (r)   
  6 = ADIA (n)   35 = GLYX (r)   64 = ISOP (r)  
  7 = PRN2 (n)   36 = CRES (r)   65 = MO2 (r)   
  8 = PRPN (n)   37 = AHO2 (r)   66 = MAO3 (r)  
  9 = OZID (n)   38 = RAN1 (r)   67 = CRO2 (r)  
 10 = MSA (n)    39 = ZO2 (r)    68 = MCRG (r)  
 11 = DOL6 (r)   40 = ETHE (r)   69 = MVKO (r)  
 12 = DOL7 (r)   41 = CO (r)     70 = MAOO (r)  
 13 = DOL8 (r)   42 = MGLY (r)   71 = ROOH (r)  
 14 = CPET (r)   43 = MAN2 (r)   72 = MCO3 (r)  
 15 = CHEX (r)   44 = TO2 (r)    73 = MACR (r)  
 16 = MACA (r)   45 = HAC (r)    74 = O3 (r)    
 17 = PYVA (r)   46 = R3O2 (r)   75 = MVK (r)   
 18 = DMS (r)    47 = EO2 (r)    76 = NO2 (r)   
 19 = C2H6 (r)   48 = PO2 (r)    77 = HCHO (r)  
 20 = C3H8 (r)   49 = MRO2 (r)   78 = SO2 (r)   
 21 = MPAN (r)   50 = MVN2 (r)   79 = ALD2 (r)  
 22 = IPAN (r)   51 = ETO2 (r)   80 = CHO2 (r)  
 23 = H2O2 (r)   52 = PRN1 (r)   81 = NO (r)    
 24 = AROM (r)   53 = RIO2 (r)   82 = HO2 (r)   
 25 = TPAN (r)   54 = TCO3 (r)   83 = NO3 (r)   
 26 = N2O5 (r)   55 = INO2 (r)   84 = OH (r)    
 27 = HONO (r)   56 = HACO (r)  
 28 = RAN2 (r)   57 = HNO3 (r)  
 29 = CH4 (r)    58 = MGGY (r)  

Fixed species
  1 = O2 (n)      3 = CO2 (n)   
  2 = H2O (r)     4 = H2 (n)    

### Subroutines ---------------------------------------

void Fun( 
  float V[],                             /* Concentrations of variable species (local) */
  float F[],                             /* Concentrations of fixed species (local) */
  float RCT[],                           /* Rate constants (local) */
  float Vdot[]                           /* Time derivative of variable species concentrations */
)void Jac_SP( 
  float V[],                             /* Concentrations of variable species (local) */
  float F[],                             /* Concentrations of fixed species (local) */
  float RCT[],                           /* Rate constants (local) */
  float JVS[]                            /* sparse Jacobian of variables */
)void Jac_SP_Vec( 
  float JVS[],                           /* sparse Jacobian of variables */
  float UV[],                            /* User vector for variables */
  float JUV[]                            /* Jacobian times user vector */
)void JacTR_SP_Vec( 
  float JVS[],                           /* sparse Jacobian of variables */
  float UV[],                            /* User vector for variables */
  float JTUV[]                           /* Jacobian transposed times user vector */
)void KppSolve( 
  float JVS[],                           /* sparse Jacobian of variables */
  float X[]                              /* Vector for variables */
)void KppSolveTR( 
  float JVS[],                           /* sparse Jacobian of variables */
  float X[],                             /* Vector for variables */
  float XX[]                             /* Vector for output variables */
)void Hessian( 
  float V[],                             /* Concentrations of variable species (local) */
  float F[],                             /* Concentrations of fixed species (local) */
  float RCT[],                           /* Rate constants (local) */
  float HESS[]                           /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
)void HessTR_Vec( 
  float HESS[],                          /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
  float U1[],                            /* User vector */
  float U2[],                            /* User vector */
  float HTU[]                            /* Transposed Hessian times user vectors: (Hess x U2)^T * U1 = [d (Jac^T*U1)/d Var] * U2  */
)void Hess_Vec( 
  float HESS[],                          /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
  float U1[],                            /* User vector */
  float U2[],                            /* User vector */
  float HU[]                             /* Hessian times user vectors: (Hess x U2) * U1 = [d (Jac*U1)/d Var] * U2 */
)void Initialize( 
)void Shuffle_user2kpp( 
  float V_USER[],                        /* Concentration of variable species in USER's order */
  float V[]                              /* Concentrations of variable species (local) */
)void Shuffle_kpp2user( 
  float V[],                             /* Concentrations of variable species (local) */
  float V_USER[]                         /* Concentration of variable species in USER's order */
)void Update_RCONST( 
)void Update_PHOTO( 
)void GetMass( 
  float CL[],                            /* Concentration of all species (local) */
  float Mass[]                           /* value of mass balance */
)void ReactantProd( 
  float V[],                             /* Concentrations of variable species (local) */
  float F[],                             /* Concentrations of fixed species (local) */
  float ARP[]                            /* Reactant product in each equation */
)void JacReactantProd( 
  float V[],                             /* Concentrations of variable species (local) */
  float F[],                             /* Concentrations of fixed species (local) */
  float JVRP[]                           /* d ARP(1:NREACT)/d VAR (1:NVAR) */
)